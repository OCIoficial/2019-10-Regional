# This is a sample test plan.
# Every line specifies a command to generate a test case.
# The first column specifies a group name.
# The second column specifies a command to generate the test case, it could be
# either a `copy` command or a generator with its respective arguments.
# A `copy` command expects a path to a file relatively to the task root.
# A generator could be a source file in Java, C++ or Python, which is compiled
# and executed with the specified arguments.
# Additionally, an argument which is different for every test case, is passed
# at the beginning. Arguments should be used to generate a uniquely random seed
# inside the generator.
# To generate test cases using test plan use `ocimatic gen-input`


[Subtask 1 - validators/st1.cpp]
  2 ; generator.py 2 950 0
  2 ; generator.py 2 999 0
  2 ; generator.py 2 10 0
  2 ; generator.py 2 500 0

  2 ; generator.py 2 950 1
  2 ; generator.py 2 999 1
  2 ; generator.py 2 10 1
  2 ; generator.py 2 500 1
  2 ; generator.py 2 850 1
  2 ; generator.py 2 899 1
  2 ; generator.py 2 80 1
  2 ; generator.py 2 800 1

[Subtask 2 - validators/st2.cpp]
  sample ; copy statement/sample-1.in
  3 ; generator.py 3 950 1
  3 ; generator.py 3 999 1
  3 ; generator.py 3 10 1
  3 ; generator.py 3 500 1
  3 ; generator.py 3 850 1
  3 ; generator.py 3 899 1
  3 ; generator.py 3 80 1
  3 ; generator.py 3 800 1

[Subtask 3 - validators/st3.cpp]
  sample ; copy statement/sample-2.in
  4 ; generator.py 100 950 1
  4 ; generator.py 950 999 1
  4 ; generator.py 800 10 1
  4 ; generator.py 550  500 1
  4 ; generator.py 999 850 1
  4 ; generator.py 1000 899 1
  4 ; generator.py 1000 80 1
  4 ; generator.py 1000 800 1

[Subtask 4 - validators/st4.cpp]
  5 ; generator.py 10000 9500 1
  5 ; generator.py 9500 9990 1
  5 ; generator.py 8000 1000 1
  5 ; generator.py 5500  5000 1
  5 ; generator.py 9990 8500 1
  5 ; generator.py 10000 8909 1
  5 ; generator.py 10000 8000 1
  5 ; generator.py 10000 8000 1
