# This is a sample test plan.
# Every line specifies a command to generate a test case.
# The first column specifies a group name.
# The second column specifies a command to generate the test case, it could be
# either a `copy` command or a generator with its respective arguments.
# A `copy` command expects a path to a file relatively to the task root.
# A generator could be a source file in Java, C++ or Python, which is compiled
# and executed with the specified arguments.
# Additionally, an argument which is different for every test case, is passed
# at the beginning. Arguments should be used to generate a uniquely random seed
# inside the generator.
# To generate test cases using test plan use `ocimatic gen-input`


[Subtask 1]
  # Use sample data as test
  1 ; copy statement/sample-1.in
  1 ; copy statement/sample-2.in

  # Edge cases
  2 ; generator.py 1 1 0.5 1 1
  2 ; generator.py 1 1000 0.5 1 1
  2 ; generator.py 1000 1 0.5 1 1
  2 ; generator.py 1000 1000 0.5 1 1
  2 ; generator.py 30 30 0.5 100 1
  2 ; generator.py 30 30 0.5 1 100
  2 ; generator.py 1000 1000 0.5 100 100
  2 ; generator.py 1000 1000 1 100 100
  2 ; generator.py 1000 1000 0 100 100

  # All tiles are the same type, costs are different
  3 ; generator.py 10 10 0 13 1
  3 ; generator.py 200 51 0 1 13
  3 ; generator.py 201 101 0 42 43
  3 ; generator.py 500 1000 0 11 12
  3 ; generator.py 999 1000 0 99 1
  3 ; generator.py 10 11 1 100 1
  3 ; generator.py 200 50 1 1 100
  3 ; generator.py 201 100 1 100 100
  3 ; generator.py 50 201 1 2 1
  3 ; generator.py 999 999 1 1 3

  # Weighed tile type, costs are different
  4 ; generator.py 201 101 0.1 20 1
  4 ; generator.py 999 1000 0.1 1 20
  4 ; generator.py 201 101 0.3 20 1
  4 ; generator.py 999 1000 0.3 1 20
  4 ; generator.py 201 101 0.5 99 80
  4 ; generator.py 999 1000 0.5 80 99
  4 ; generator.py 201 101 0.7 3 5
  4 ; generator.py 999 1000 0.7 6 5
  4 ; generator.py 201 101 0.9 31 32
  4 ; generator.py 999 1000 0.9 32 31
